import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

weather=pd.read_csv(r'C:\Users\Vinh Hoa Tu\Downloads/london_weather123.csv')
print(weather.head())
print(weather.info())
sunshine=weather[['date', 'sunshine']]
print(sunshine)

sunshine['date']=sunshine['date'].astype(str)
sd = sunshine[sunshine['date'].str.endswith(('01','15'))] # only keep date 01 and 15
sd= sd.reset_index() #reset the indice of dataframe
sd=sd.drop('index',axis=1)

#show sd
plt.figure(figsize=(20,8))
plt.plot(sd['sunshine'])
plt.title('Sunshine as a function of time')
plt.xlabel('Time')
plt.ylabel('Sunshine')
plt.show()

mean=sd['sunshine'].mean()
variance=sd['sunshine'].var()
print(f'Moyenne : {mean}, Variance :{variance}')
#decompose the serie into trend, seasonal, residual and stationary serie

from statsmodels.tsa.seasonal import seasonal_decompose
result= seasonal_decompose(sd['sunshine'], model='additive',period=24)
result.plot()
plt.show()

plt.figure(figsize=(15,6))
plt.plot(sd['sunshine'].diff()) # remove trend and season of sunshine by differencing 
stationnarized=sd['sunshine'].diff()
#Augmented Dickey-Fuller Test to test the stationarity of (Xt)
from statsmodels.tsa.stattools import adfuller
adfuller(sd['sunshine'])



result = adfuller(sd['sunshine'])

# Extracting and printing the results
adf_statistic = result[0]
p_value = result[1]
critical_values = result[4]

print(f'ADF Statistic: {adf_statistic}')
print(f'p-value: {p_value}')
print('Critical Values:')
for key, value in critical_values.items():
    print(f'   {key}: {value}')

# Interpret the results
if p_value <= 0.05:
    print("The null hypothesis (non-stationarity) can be rejected. The time series appears to be stationary.")
else:
    print("The null hypothesis cannot be rejected. The time series")

stationnarized=stationnarized.dropna()
stationnarized




#ACF and PACF

import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# PLot ACF
plot_acf(stationnarized, lags=50)
plt.title('Autocorrelation Function (ACF)')

# Plot PACF
plot_pacf(stationnarized, lags=(50))
plt.title('Partial Autocorrelation Function (PACF)')




# train AR(27) model, lag=27 in summary AutoReg(27)

from statsmodels.tsa.ar_model import AutoReg
train_data = stationnarized[:len(stationnarized)-10]
test_data = stationnarized[len(stationnarized)-10:]
ar_model = AutoReg(train_data, lags=27).fit()
print(ar_model.summary())



# prediction
predict= ar_model.predict(start= len(train_data)+1, end=len(stationnarized),dynamic=False)

# ploting the serie with the last 10% of value highlighted in red
plt.figure(figsize=(15,8))
plt.plot(test_data, color='red')
plt.plot(stationnarized[:len(stationnarized)-10])
plt.title('Serie with the last 10% of value highlighted in red')


#prediction with AR model
plt.figure(figsize=(15,8))
plt.plot(predict, color='red')
plt.plot(stationnarized[:len(stationnarized)-10])
plt.title('Prediction of the last 10 values using AR(27)')
plt.legend()


# ploting test_data and prediction using AR(27) modele
plt.figure(figsize=(15,8))
plt.plot(predict, color='red')
plt.plot(test_data)
plt.title('Prediction of the last 10 values using AR(27)')


# residuals of model AR after training
residuals = ar_model.resid

# standadized residuals
std_residuals = residuals / np.std(residuals)


#plot
fig, axs = plt.subplots(1, 2, figsize=(15, 6))

# Plot 1: Standardized residuals
axs[0].plot(std_residuals)
axs[0].set_title('Standardized residuals')

# Plot 2: ACF of standardized residuals
plot_acf(std_residuals, lags=50, ax=axs[1])  # Pass the ax object to plot_acf
axs[1].set_title('ACF of standardized residuals')


#Using Ljung-box to determine the confidence of the non-hypothesis
import statsmodels.api as sm

df= sm.stats.acorr_ljungbox(residuals, lags=20)
df1=pd.DataFrame(df,columns=['lb_pvalue'])

plt.figure(figsize=(10, 6))
plt.plot(range(1,21), df1, marker='o', linestyle='', color='b')
plt.axhline(y=0.05, color='r', linestyle='--', label='signifcant level (0.05)')
plt.title('Ljung-Box Test P-Values')
plt.xlabel('Lag')
plt.ylabel('P-Value')
plt.legend()
plt.show()
